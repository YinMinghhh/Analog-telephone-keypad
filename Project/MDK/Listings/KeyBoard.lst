C51 COMPILER V9.57.0.0   KEYBOARD                                                          01/22/2023 13:37:33 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE KEYBOARD
OBJECT MODULE PLACED IN .\Objects\KeyBoard.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\CODE\KeyBoard.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libraries\libra
                    -ries;..\USER\inc;..\CODE;..\..\Libraries\zxy_libraries) DEBUG OBJECTEXTEND PRINT(.\Listings\KeyBoard.lst) TABS(2) OBJECT
                    -(.\Objects\KeyBoard.obj)

line level    source

   1          /***
   2           * @file    KeBoard.c
   3           * @author  zxy
   4           * @date    2023-01-17
   5          */
   6          
   7          #include "KeyBoard.h"
   8          
   9          /***
  10           * @brief   |KeyBoard_4x4对象|
  11           *          初始化
  12           * @date    2023-01-18
  13          */
  14          uint8 KeyBoard_4x4_init(KeyBoard_4x4 *const THIS) {
  15   1          THIS->_count = 0x01;
  16   1          THIS->_flag  = 1;
  17   1          THIS->button_na    = NONE;
  18   1          THIS->_last_button = one;
  19   1      
  20   1          THIS->enable = 1;
  21   1      
  22   1          printf("KeyBoard_4x4_init_%d\r\n", THIS->_count);
  23   1          return 0;
  24   1      }
  25          
  26          /***
  27           * @brief   |KeyBoard_4x4对象|
  28           *          内部调用
  29           * @date    2013-01-18
  30          */
  31          uint8 _KeyBoard_4x4_read(KeyBoard_4x4 *const THIS) {
  32   1          THIS->_key_save_read_data  = 0x00; // 清除数据, 0表示没有按键被按下
  33   1          key_4x4_pin = 0xF0;             // 检测高四位, 找出列号
  34   1          _nop_();_nop_();_nop_();_nop_();
  35   1          THIS->_key_save_read_data  = key_4x4_pin ^ 0xF0;    // 保留高四位数据, 如果有被按下的置
             -1
  36   1      
  37   1          key_4x4_pin = 0x0F;             // 检测低四位, 找出行号
  38   1          _nop_();_nop_();_nop_();_nop_();
  39   1          THIS->_key_save_read_data += key_4x4_pin ^ 0x0F;    // 加上低四位数据, 给出被按下键的坐
             -标
  40   1          return THIS->_key_save_read_data;
  41   1      }
  42          
  43          /***
  44           * @brief   |KeyBoard_4x4对象|
  45           *          扫描键盘
  46           *          并给出被按下的按键状态, 
  47           *          或者给出没有按键被按下的说明
  48           * @date    2023-01-18
  49          */
  50          ButtonName KeyBoard_4x4_scan(KeyBoard_4x4 *const THIS) {
  51   1          if(_KeyBoard_4x4_read(THIS) && THIS->_flag) {   // 有按键被按下 且 允许处理. 
C51 COMPILER V9.57.0.0   KEYBOARD                                                          01/22/2023 13:37:33 PAGE 2   

  52   2          // 不要更换 && 左右内容的顺序, 以保证即使_flag为0时read函数仍会被执行. 
  53   2              // THIS->_count++;
  54   2              if(++THIS->_count > 1) {    // 计数消抖
  55   3                  switch(THIS->_key_save_read_data) { 
  56   4                      // 按键处理, 从_key_save_read_data映射到实际
  57   4                      case 0x11:  THIS->button_na = one;  break;
  58   4                      case 0x21:  THIS->button_na = two;  break;
  59   4                      case 0x41:  THIS->button_na = three;    break;
  60   4                      case 0x81:  THIS->button_na = Dail; break;
  61   4      
  62   4                      case 0x12:  THIS->button_na = four; break;
  63   4                      case 0x22:  THIS->button_na = five; break;
  64   4                      case 0x42:  THIS->button_na = six;  break;
  65   4                      case 0x82:  THIS->button_na = Hang; break;
  66   4      
  67   4                      case 0x14:  THIS->button_na = seven;    break;
  68   4                      case 0x24:  THIS->button_na = eight;    break;
  69   4                      case 0x44:  THIS->button_na = nine; break;
  70   4                      case 0x84:  THIS->button_na = Backspace;    break;
  71   4      
  72   4                      case 0x18:  THIS->button_na = asterisk; break;
  73   4                      case 0x28:  THIS->button_na = zero; break;
  74   4                      case 0x48:  THIS->button_na = pound;    break;
  75   4                      case 0x88:  THIS->button_na = Redial;   break;
  76   4      
  77   4                      default:    THIS->button_na = DEFAULT;  break;
  78   4                  }
  79   3      
  80   3                   
  81   3      //             if(THIS->button_na == THIS->_last_button) {
  82   3      //                 if(Timer_judge(&THIS->_same)) {
  83   3      //                     THIS->_last_button = THIS->button_na;
  84   3      // //                    printf("Timer_Same");
  85   3      // //                 %lu_%lu\r\n", SYStim, THIS->_same->last_time);
  86   3      //                 }
  87   3      //                 else {
  88   3      //                     THIS->button_na = NONE;
  89   3      //                 }
  90   3      //             }
  91   3      //             else {
  92   3      //                 if(Timer_judge(&THIS->_diff)) {
  93   3      //                     THIS->_last_button = THIS->button_na;
  94   3      //                 }
  95   3      //                 else {
  96   3      //                     THIS->button_na = NONE;
  97   3      //                 }
  98   3      //             }
  99   3      
 100   3                  // putchar('H');
 101   3                  THIS->_flag  = 0;   // 禁止再次进入按键处理
 102   3                  THIS->_count = 0;   // 计数清零
 103   3      
 104   3                  // if(!Timer_judge(&THIS->_same)){
 105   3                  //     THIS->button_na = NONE;
 106   3                  //     putchar('N');
 107   3                  // }
 108   3              }
 109   2          }
 110   1          else if (!(THIS->_key_save_read_data)) {   // 没有按键被按下
 111   2              THIS->_flag  = 1;
 112   2              THIS->_count = 0;       // 计数清零
 113   2              THIS->button_na = NONE;
C51 COMPILER V9.57.0.0   KEYBOARD                                                          01/22/2023 13:37:33 PAGE 3   

 114   2          }
 115   1          return  THIS->button_na;
 116   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    400    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
